---
- hosts: all
  become: true

  vars_files:
    - ../vars/vars.yml
    - /etc/ansible/vault/nginx.yml

  handlers:
  - name: reload Nginx
    service:
      name: Nginx
      state: reload
  - name: restart ssh
    service: name=ssh state=restarted

  pre_tasks:
  - name: Update apt cache if needed.
    apt:
      update_cache: yes
      cache_valid_time: 3600
    when: ansible_os_family == 'Debian'

  tasks:
  - name: trigger initial system wide update (Debian)
    apt:
      upgrade: yes
    when: ansible_os_family == 'Debian'
  
  - name: trigger initial system wide update (CentOS 7)
    yum:
      name: '*'
      state: latest
    when: ansible_facts['distribution'] == 'CentOS' and ansible_facts['distribution_major_version'] == "7"

  - name: trigger initial system wide update (CentOS 8+)
    dnf:
      name: '*'
      state: latest
    when: ansible_facts['distribution'] == 'CentOS' and ansible_facts['distribution_major_version'] >= "8"  

  - name: Set timezone
    community.general.timezone:
      name: Asia/Barnaul
      
  - name: Install required package
    package:
      name:
      - net-tools
      - curl
      - wget
      - nano
      - vim
      - mc
      state: present

  - name: Install bmon (for Ubuntu/Debian)
    package:
      name:
      - bmon
      state: present
    when: ansible_os_family == 'Debian'

  - name: Disable password authentication for root
    lineinfile:
      path: /etc/ssh/sshd_config
      state: present
      regexp: '^#?PermitRootLogin'
      line: 'PermitRootLogin prohibit-password'
    notify: restart ssh

  - name: Configure firewall (Debian and Ubuntu)
    ufw:
      rule: "{{ item.rule }}"
      port: "{{ item.port }}"
      proto: "{{ item.proto }}"
    with_items: 
    - { rule: 'allow', port: 22, proto: 'tcp' }
    - { rule: 'allow', port: 80, proto: 'tcp' }
    - { rule: 'allow', port: 443, proto: 'tcp' }
    when: ansible_os_family == 'Debian'

  - name: Configure default ufw policy
    ufw:
      direction: "{{ item.direction }}"
      policy: "{{ item.policy }}"
      state: enabled
    with_items:
    - { direction: outgoing, policy: allow }
    - { direction: incoming, policy: deny }
    when: ansible_os_family == 'Debian'

  - name: Enable ufw
    ufw:
      state: enabled
    when: ansible_os_family == 'Ubuntu'

  - name: Configure firewall (CentOS)
    firewalld:
      state: "{{ item.state }}"
      port: "{{ item.port }}"
      zone: public
      immediate: yes
      permanent: yes
    with_items: 
    - { state: 'enabled', port: '22/tcp' }
    - { state: 'enabled', port: '80/tcp' }
    - { state: 'enabled', port: '443/tcp' }
    when: ansible_os_family == 'RedHat'

  - name: Enable EPEL Repository on CentOS 8 or 9
    dnf:
      name: epel-release
      state: latest
    when: ansible_facts['distribution'] == 'CentOS' and ansible_facts['distribution_major_version'] >= "8" 

  - name: Enable EPEL Repository on CentOS 7
    yum:
      name: epel-release
      state: latest
    when: ansible_facts['distribution'] == 'CentOS' and ansible_facts['distribution_major_version'] == "7"  

  - name: Install fail2ban (RedHat).
    yum: name=fail2ban state=present enablerepo=epel
    when: ansible_os_family == 'RedHat'

  - name: Install fail2ban (Debian).
    apt: name=fail2ban state=present
    when: ansible_os_family == 'Debian'

  - name: Ensure fail2ban is running and enabled on boot.
    service: name=fail2ban state=started enabled=yes

  - name: Create local configuration fail for fail2ban
    copy:
      src: ../files/jail.conf
      dest: /etc/fail2ban/jail.local
  
  - name: Restart fail2ban.
    service:
      name: fail2ban
      state: restarted

  - name: Install Nginx
    package:
      name:
      - nginx
      state: present

  - name: Enable and start nginx
    service:
      name: nginx
      state: started
      enabled: yes
  
  - name: Create directory for ssl certs
    file:
      path: /etc/nginx/ssl
      state: directory
  
  - name: Copy certificate and key ../files/jail.conf
    copy:
      src: "{{ item.src }}"
      dest: "{{ item.dest }}"
      force: true
    with_items:
      - { src: '/etc/ansible/config/ssl/itproblog.ru.key', dest: "{{ ssl_certificate_path }}" }
      - { src: '/etc/ansible/config/ssl/itproblog.ru.crt', dest: "{{ ssl_certificate_key_path }}" }

  - name: Copy config file with certificate path declaration
    template:
      src: ../files/nginx_ssl.conf.j2
      dest: /etc/nginx/conf.d/nginx_ssl.conf
  
  - name: Create directory fon nginx on CentOS
    file:
      path: "{{ item }}"
      state: directory
    with_items:
      - /etc/nginx/sites-available
      - /etc/nginx/sites-enabled

  - name: Copy nginx config file
    copy:
      src: ../files/gitlab.itproblog.ru
      dest: /etc/nginx/sites-available/gitlab.itproblog.ru

  - name: Enable nginx new site (Debian)
    file:
      src: /etc/nginx/sites-available/gitlab.itproblog.ru
      dest: /etc/nginx/sites-enabled/gitlab.itproblog.ru
      state: link

  - name: Reload nginx
    service:
      name: nginx
      state: reloaded